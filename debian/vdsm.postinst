#!/bin/sh
# postinst script for vdsm
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

VDSM_USER=vdsm
VDSM_GROUP=kvm
QEMU_USER=libvirt-qemu
QEMU_GROUP=kvm
SNLK_GROUP=sanlock
SNLK_USER=sanlock
LIBVIRT_SOCK_GROUP=libvirt
CDROM_GROUP=cdrom

INSTALLDIR="install -dDm 0755 -o $VDSM_USER -g $VDSM_GROUP"

case "$1" in
    configure)
        getent passwd "$VDSM_USER" >/dev/null || \
            useradd -r -u 36 -g "$VDSM_GROUP" -d /var/lib/vdsm \
            -s /usr/sbin/nologin -c "Node Virtualization Manager" "$VDSM_USER"
        #getent passwd "$SNLK_USER" >/dev/null || useradd -r -g "$SNLK_GROUP" \
        #    -s /bin/false -c "sanlock service" "$SNLK_USER"
        usermod -a -G "$QEMU_GROUP","$SNLK_GROUP","$LIBVIRT_SOCK_GROUP" "$VDSM_USER"
        usermod -a -G "$QEMU_GROUP","$VDSM_GROUP" "$SNLK_USER"
        usermod -a -G "$CDROM_GROUP" "$QEMU_USER"

        start_conf_section="## beginning of configuration section by vdsm"
        end_conf_section="## end of configuration section by vdsm"
        if ! grep "$start_conf_section" /etc/default/sanlock ; then
            echo "$start_conf_section" >> /etc/default/sanlock
            echo "sanlock_opts=\"\$sanlock_opts -U sanlock -G sanlock\"" >> /etc/default/sanlock
            echo "$end_conf_section" >> /etc/default/sanlock
        fi

        $INSTALLDIR /rhev
        $INSTALLDIR /rhev/data-center
        $INSTALLDIR /rhev/data-center/hsm-tasks
        $INSTALLDIR /rhev/data-center/mnt
        $INSTALLDIR /var/lib/libvirt/qemu/channels
        chmod 775 /var/lib/libvirt/qemu/channels
        $INSTALLDIR /etc/pki/vdsm
        $INSTALLDIR /etc/pki/vdsm/keys
        $INSTALLDIR /etc/pki/vdsm/certs
        $INSTALLDIR /var/lib/vdsm
        $INSTALLDIR /var/lib/vdsm/connections
        $INSTALLDIR /var/lib/vdsm/netconfback
        $INSTALLDIR /var/run/vdsm
        $INSTALLDIR /var/run/vdsm/payload
        $INSTALLDIR /var/run/vdsm/v2v
        $INSTALLDIR /var/run/vdsm/sourceRoutes
        $INSTALLDIR /var/run/vdsm/trackedInterfaces
        $INSTALLDIR /var/log/vdsm
        $INSTALLDIR /var/log/vdsm/backup
        chmod g+x /var/lib/libvirt/qemu
        chmod 644 /etc/iscsi/initiatorname.iscsi

        sysctl -q -p /etc/sysctl.d/vdsm.conf
        vdsm-tool load-needed-modules

        echo /usr/lib/sanlock/ > /etc/ld.so.conf.d/sanlock.conf
        ldconfig

        udevadm control --reload-rules

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# vdsm hooks are invoked as .pyc files, but the .pyc files are generated by
# dh helpers. Restarting vdsmd should be run after dh helpers so that the
# hooks are invoked correctly.
if [ "$1" = "configure" ]; then
    supervdsmd_start_required='no'
    vdsmd_start_required='no'

    # Both vdsm and supervdsm should be managed here and must be restarted if
    # ran before (code might changed)
    if systemctl status supervdsmd | grep -q start/running ; then
        supervdsmd_start_required='yes'
    fi
    if systemctl status vdsmd | grep -q start/running ; then
        vdsmd_start_required='yes'
    fi
    if ! vdsm-tool is-configured --module libvirt >/dev/null 2>&1; then
        vdsm-tool configure --module libvirt --force >/dev/null 2>&1
    fi
    if [ "${supervdsmd_start_required}" = 'yes' ]; then
        systemctl stop supervdsmd || :
        systemctl start supervdsmd || :
    fi
    if [ "${vdsmd_start_required}" = 'yes' ]; then
        systemctl stop vdsmd || :
        systemctl start vdsmd || :
    fi
fi

exit 0
